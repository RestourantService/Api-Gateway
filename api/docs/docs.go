// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/reservation-system/menu": {
            "get": {
                "description": "Retrieves multiple meals info from menu table in PostgreSQL",
                "tags": [
                    "menu"
                ],
                "summary": "Fetches meals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restaurant ID",
                        "name": "restaurant_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of meals to fetch",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of meals to omit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/menu.Meals"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching meals from menu",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Inserts new meal info to menu table in PostgreSQL",
                "tags": [
                    "menu"
                ],
                "summary": "Adds a meal to menu",
                "parameters": [
                    {
                        "description": "New data",
                        "name": "new_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/menu.MealDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/menu.ID"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while adding meal to menu",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/menu/{meal_id}": {
            "get": {
                "description": "Retrieves meal info from menu table in PostgreSQL",
                "tags": [
                    "menu"
                ],
                "summary": "Gets a meal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "meal_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/menu.MealInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid meal ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while getting meal from menu",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates meal info in menu table in PostgreSQL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "menu"
                ],
                "summary": "Updates a meal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "meal_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New info",
                        "name": "new_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/menu.MealDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid meal ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while updating meal in menu",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes meal info from menu table in PostgreSQL",
                "tags": [
                    "menu"
                ],
                "summary": "Deletes a meal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "meal_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid meal ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while removing meal from menu",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/payments": {
            "post": {
                "description": "Inserts new payment info to payments table in PostgreSQL",
                "tags": [
                    "payment"
                ],
                "summary": "Creates a payment",
                "parameters": [
                    {
                        "description": "New data",
                        "name": "new_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.PaymentDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while creating payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/payments/{payment_id}": {
            "get": {
                "description": "Retrieves payment info from payments table in PostgreSQL",
                "tags": [
                    "payment"
                ],
                "summary": "Gets a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "payment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.PaymentInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid payment ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while getting payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates payment info in payments table in PostgreSQL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Updates a payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "payment_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New info",
                        "name": "new_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.PaymentInsert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid payment ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while updating payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/reservations": {
            "get": {
                "description": "Retrieves multiple reservations info from reservations table in PostgreSQL",
                "tags": [
                    "reservation"
                ],
                "summary": "Fetches reservations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Restaurant ID",
                        "name": "restaurant_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of reservations to fetch",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of reservations to omit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reservation.Reservations"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching reservations",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Inserts new reservation info to reservations table in PostgreSQL",
                "tags": [
                    "reservation"
                ],
                "summary": "Creates a reservation",
                "parameters": [
                    {
                        "description": "New data",
                        "name": "new_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reservation.ReservationDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reservation.ID"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while creating reservation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/reservations/{reservation_id}": {
            "get": {
                "description": "Retrieves reservation info from reservations table in PostgreSQL",
                "tags": [
                    "reservation"
                ],
                "summary": "Gets a reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation ID",
                        "name": "reservation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reservation.ReservationInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while getting reservation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates reservation info in reservations table in PostgreSQL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "Updates a reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation ID",
                        "name": "reservation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New info",
                        "name": "new_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reservation.ReservationInsert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while updating reservation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes reservation info from reservations table in PostgreSQL",
                "tags": [
                    "reservation"
                ],
                "summary": "Deletes a reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation ID",
                        "name": "reservation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while deleting reservation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/reservations/{reservation_id}/check": {
            "get": {
                "description": "Checks whether a reservation exists in reservations table in PostgreSQL",
                "tags": [
                    "reservation"
                ],
                "summary": "Validates a reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation ID",
                        "name": "reservation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reservation.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while checking reservation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/reservations/{reservation_id}/order": {
            "post": {
                "description": "Inserts order for a reservation in Redis",
                "tags": [
                    "reservation"
                ],
                "summary": "Orders meals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation ID",
                        "name": "reservation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New order",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/reservation.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reservation.ID"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while ordering",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/reservations/{reservation_id}/payment": {
            "post": {
                "description": "Inserts payment info to payments table in PostgreSQL",
                "tags": [
                    "reservation"
                ],
                "summary": "Pays for a reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation ID",
                        "name": "reservation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reservation.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while making a payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/restaurants": {
            "get": {
                "description": "Retrieves multiple restaurants info from restaurants table in PostgreSQL",
                "tags": [
                    "restaurant"
                ],
                "summary": "Fetches restaurants",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Number of restaurants to fetch",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of restaurants to omit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restaurant.Restaurants"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching restaurants",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Inserts new restaurant info to restaurants table in PostgreSQL",
                "tags": [
                    "restaurant"
                ],
                "summary": "Creates a restaurant",
                "parameters": [
                    {
                        "description": "New data",
                        "name": "new_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/restaurant.RestaurantDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restaurant.ID"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while creating restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/restaurants/{restaurant_id}": {
            "get": {
                "description": "Retrieves restaurant info from restaurants table in PostgreSQL",
                "tags": [
                    "restaurant"
                ],
                "summary": "Gets a restaurant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restaurant ID",
                        "name": "restaurant_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restaurant.RestaurantInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid restaurant ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while getting restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates restaurant info in restaurants table in PostgreSQL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restaurant"
                ],
                "summary": "Updates a restaurant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restaurant ID",
                        "name": "restaurant_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New info",
                        "name": "new_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/restaurant.RestaurantDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid restaurant ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while updating restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes restaurant info from restaurants table in PostgreSQL",
                "tags": [
                    "restaurant"
                ],
                "summary": "Deletes a restaurant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restaurant ID",
                        "name": "restaurant_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid restaurant ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while deleting restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reservation-system/users/{user_id}": {
            "get": {
                "description": "Retrieves user info from users table in PostgreSQL",
                "tags": [
                    "user"
                ],
                "summary": "Gets a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UserInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while getting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates user info in users table in PostgreSQL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updates a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New info",
                        "name": "new_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.UserDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes user info from users table in PostgreSQL",
                "tags": [
                    "user"
                ],
                "summary": "Deletes a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error while deleting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authentication.UserDetails": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "menu.ID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "menu.MealDetails": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "restaurant_id": {
                    "type": "string"
                }
            }
        },
        "menu.MealInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "restaurant_id": {
                    "type": "string"
                }
            }
        },
        "menu.Meals": {
            "type": "object",
            "properties": {
                "meals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/menu.MealInfo"
                    }
                }
            }
        },
        "payment.PaymentDetails": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "payment_method": {
                    "type": "string"
                },
                "reservation_id": {
                    "type": "string"
                }
            }
        },
        "payment.PaymentInfo": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string"
                },
                "payment_status": {
                    "type": "string"
                },
                "reservation_id": {
                    "type": "string"
                }
            }
        },
        "payment.PaymentInsert": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "payment_method": {
                    "type": "string"
                },
                "payment_status": {
                    "type": "string"
                },
                "reservation_id": {
                    "type": "string"
                }
            }
        },
        "payment.Status": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "reservation.ID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "reservation.Order": {
            "type": "object",
            "properties": {
                "menu_item_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "reservation.ReservationDetails": {
            "type": "object",
            "properties": {
                "reservation_time": {
                    "type": "string"
                },
                "restaurant_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "reservation.ReservationInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "reservation_time": {
                    "type": "string"
                },
                "restaurant_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "reservation.ReservationInsert": {
            "type": "object",
            "properties": {
                "reservation_time": {
                    "type": "string"
                },
                "restaurant_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "reservation.Reservations": {
            "type": "object",
            "properties": {
                "reservations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/reservation.ReservationInfo"
                    }
                }
            }
        },
        "reservation.Status": {
            "type": "object",
            "properties": {
                "successful": {
                    "type": "boolean"
                }
            }
        },
        "restaurant.ID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "restaurant.RestaurantDetails": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "restaurant.RestaurantInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "restaurant.Restaurants": {
            "type": "object",
            "properties": {
                "restaurants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/restaurant.RestaurantInfo"
                    }
                }
            }
        },
        "user.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Restaurant Reservation System",
	Description:      "API Gateway of Restaurant Reservation System",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
